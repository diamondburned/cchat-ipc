package messages

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *AuthenticateEntry) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "name":
			z.Name, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Name")
				return
			}
		case "placeholder":
			z.Placeholder, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Placeholder")
				return
			}
		case "description":
			z.Description, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Description")
				return
			}
		case "secret":
			z.Secret, err = dc.ReadBool()
			if err != nil {
				err = msgp.WrapError(err, "Secret")
				return
			}
		case "multiline":
			z.Multiline, err = dc.ReadBool()
			if err != nil {
				err = msgp.WrapError(err, "Multiline")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *AuthenticateEntry) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 5
	// write "name"
	err = en.Append(0x85, 0xa4, 0x6e, 0x61, 0x6d, 0x65)
	if err != nil {
		return
	}
	err = en.WriteString(z.Name)
	if err != nil {
		err = msgp.WrapError(err, "Name")
		return
	}
	// write "placeholder"
	err = en.Append(0xab, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72)
	if err != nil {
		return
	}
	err = en.WriteString(z.Placeholder)
	if err != nil {
		err = msgp.WrapError(err, "Placeholder")
		return
	}
	// write "description"
	err = en.Append(0xab, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e)
	if err != nil {
		return
	}
	err = en.WriteString(z.Description)
	if err != nil {
		err = msgp.WrapError(err, "Description")
		return
	}
	// write "secret"
	err = en.Append(0xa6, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74)
	if err != nil {
		return
	}
	err = en.WriteBool(z.Secret)
	if err != nil {
		err = msgp.WrapError(err, "Secret")
		return
	}
	// write "multiline"
	err = en.Append(0xa9, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x6c, 0x69, 0x6e, 0x65)
	if err != nil {
		return
	}
	err = en.WriteBool(z.Multiline)
	if err != nil {
		err = msgp.WrapError(err, "Multiline")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *AuthenticateEntry) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 5
	// string "name"
	o = append(o, 0x85, 0xa4, 0x6e, 0x61, 0x6d, 0x65)
	o = msgp.AppendString(o, z.Name)
	// string "placeholder"
	o = append(o, 0xab, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72)
	o = msgp.AppendString(o, z.Placeholder)
	// string "description"
	o = append(o, 0xab, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e)
	o = msgp.AppendString(o, z.Description)
	// string "secret"
	o = append(o, 0xa6, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74)
	o = msgp.AppendBool(o, z.Secret)
	// string "multiline"
	o = append(o, 0xa9, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x6c, 0x69, 0x6e, 0x65)
	o = msgp.AppendBool(o, z.Multiline)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *AuthenticateEntry) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "name":
			z.Name, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Name")
				return
			}
		case "placeholder":
			z.Placeholder, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Placeholder")
				return
			}
		case "description":
			z.Description, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Description")
				return
			}
		case "secret":
			z.Secret, bts, err = msgp.ReadBoolBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Secret")
				return
			}
		case "multiline":
			z.Multiline, bts, err = msgp.ReadBoolBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Multiline")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *AuthenticateEntry) Msgsize() (s int) {
	s = 1 + 5 + msgp.StringPrefixSize + len(z.Name) + 12 + msgp.StringPrefixSize + len(z.Placeholder) + 12 + msgp.StringPrefixSize + len(z.Description) + 7 + msgp.BoolSize + 10 + msgp.BoolSize
	return
}

// DecodeMsg implements msgp.Decodable
func (z *CompletionEntry) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "raw":
			z.Raw, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Raw")
				return
			}
		case "text":
			var zb0002 uint32
			zb0002, err = dc.ReadMapHeader()
			if err != nil {
				err = msgp.WrapError(err, "Text")
				return
			}
			for zb0002 > 0 {
				zb0002--
				field, err = dc.ReadMapKeyPtr()
				if err != nil {
					err = msgp.WrapError(err, "Text")
					return
				}
				switch msgp.UnsafeString(field) {
				case "content":
					z.Text.Content, err = dc.ReadString()
					if err != nil {
						err = msgp.WrapError(err, "Text", "Content")
						return
					}
				case "segments":
					var zb0003 uint32
					zb0003, err = dc.ReadArrayHeader()
					if err != nil {
						err = msgp.WrapError(err, "Text", "Segments")
						return
					}
					if cap(z.Text.Segments) >= int(zb0003) {
						z.Text.Segments = (z.Text.Segments)[:zb0003]
					} else {
						z.Text.Segments = make([]TextSegment, zb0003)
					}
					for za0001 := range z.Text.Segments {
						err = z.Text.Segments[za0001].DecodeMsg(dc)
						if err != nil {
							err = msgp.WrapError(err, "Text", "Segments", za0001)
							return
						}
					}
				default:
					err = dc.Skip()
					if err != nil {
						err = msgp.WrapError(err, "Text")
						return
					}
				}
			}
		case "secondary":
			var zb0004 uint32
			zb0004, err = dc.ReadMapHeader()
			if err != nil {
				err = msgp.WrapError(err, "Secondary")
				return
			}
			for zb0004 > 0 {
				zb0004--
				field, err = dc.ReadMapKeyPtr()
				if err != nil {
					err = msgp.WrapError(err, "Secondary")
					return
				}
				switch msgp.UnsafeString(field) {
				case "content":
					z.Secondary.Content, err = dc.ReadString()
					if err != nil {
						err = msgp.WrapError(err, "Secondary", "Content")
						return
					}
				case "segments":
					var zb0005 uint32
					zb0005, err = dc.ReadArrayHeader()
					if err != nil {
						err = msgp.WrapError(err, "Secondary", "Segments")
						return
					}
					if cap(z.Secondary.Segments) >= int(zb0005) {
						z.Secondary.Segments = (z.Secondary.Segments)[:zb0005]
					} else {
						z.Secondary.Segments = make([]TextSegment, zb0005)
					}
					for za0002 := range z.Secondary.Segments {
						err = z.Secondary.Segments[za0002].DecodeMsg(dc)
						if err != nil {
							err = msgp.WrapError(err, "Secondary", "Segments", za0002)
							return
						}
					}
				default:
					err = dc.Skip()
					if err != nil {
						err = msgp.WrapError(err, "Secondary")
						return
					}
				}
			}
		case "icon_url":
			z.IconURL, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "IconURL")
				return
			}
		case "image":
			z.Image, err = dc.ReadBool()
			if err != nil {
				err = msgp.WrapError(err, "Image")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *CompletionEntry) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 5
	// write "raw"
	err = en.Append(0x85, 0xa3, 0x72, 0x61, 0x77)
	if err != nil {
		return
	}
	err = en.WriteString(z.Raw)
	if err != nil {
		err = msgp.WrapError(err, "Raw")
		return
	}
	// write "text"
	err = en.Append(0xa4, 0x74, 0x65, 0x78, 0x74)
	if err != nil {
		return
	}
	// map header, size 2
	// write "content"
	err = en.Append(0x82, 0xa7, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74)
	if err != nil {
		return
	}
	err = en.WriteString(z.Text.Content)
	if err != nil {
		err = msgp.WrapError(err, "Text", "Content")
		return
	}
	// write "segments"
	err = en.Append(0xa8, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.Text.Segments)))
	if err != nil {
		err = msgp.WrapError(err, "Text", "Segments")
		return
	}
	for za0001 := range z.Text.Segments {
		err = z.Text.Segments[za0001].EncodeMsg(en)
		if err != nil {
			err = msgp.WrapError(err, "Text", "Segments", za0001)
			return
		}
	}
	// write "secondary"
	err = en.Append(0xa9, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79)
	if err != nil {
		return
	}
	// map header, size 2
	// write "content"
	err = en.Append(0x82, 0xa7, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74)
	if err != nil {
		return
	}
	err = en.WriteString(z.Secondary.Content)
	if err != nil {
		err = msgp.WrapError(err, "Secondary", "Content")
		return
	}
	// write "segments"
	err = en.Append(0xa8, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.Secondary.Segments)))
	if err != nil {
		err = msgp.WrapError(err, "Secondary", "Segments")
		return
	}
	for za0002 := range z.Secondary.Segments {
		err = z.Secondary.Segments[za0002].EncodeMsg(en)
		if err != nil {
			err = msgp.WrapError(err, "Secondary", "Segments", za0002)
			return
		}
	}
	// write "icon_url"
	err = en.Append(0xa8, 0x69, 0x63, 0x6f, 0x6e, 0x5f, 0x75, 0x72, 0x6c)
	if err != nil {
		return
	}
	err = en.WriteString(z.IconURL)
	if err != nil {
		err = msgp.WrapError(err, "IconURL")
		return
	}
	// write "image"
	err = en.Append(0xa5, 0x69, 0x6d, 0x61, 0x67, 0x65)
	if err != nil {
		return
	}
	err = en.WriteBool(z.Image)
	if err != nil {
		err = msgp.WrapError(err, "Image")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *CompletionEntry) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 5
	// string "raw"
	o = append(o, 0x85, 0xa3, 0x72, 0x61, 0x77)
	o = msgp.AppendString(o, z.Raw)
	// string "text"
	o = append(o, 0xa4, 0x74, 0x65, 0x78, 0x74)
	// map header, size 2
	// string "content"
	o = append(o, 0x82, 0xa7, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74)
	o = msgp.AppendString(o, z.Text.Content)
	// string "segments"
	o = append(o, 0xa8, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73)
	o = msgp.AppendArrayHeader(o, uint32(len(z.Text.Segments)))
	for za0001 := range z.Text.Segments {
		o, err = z.Text.Segments[za0001].MarshalMsg(o)
		if err != nil {
			err = msgp.WrapError(err, "Text", "Segments", za0001)
			return
		}
	}
	// string "secondary"
	o = append(o, 0xa9, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79)
	// map header, size 2
	// string "content"
	o = append(o, 0x82, 0xa7, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74)
	o = msgp.AppendString(o, z.Secondary.Content)
	// string "segments"
	o = append(o, 0xa8, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73)
	o = msgp.AppendArrayHeader(o, uint32(len(z.Secondary.Segments)))
	for za0002 := range z.Secondary.Segments {
		o, err = z.Secondary.Segments[za0002].MarshalMsg(o)
		if err != nil {
			err = msgp.WrapError(err, "Secondary", "Segments", za0002)
			return
		}
	}
	// string "icon_url"
	o = append(o, 0xa8, 0x69, 0x63, 0x6f, 0x6e, 0x5f, 0x75, 0x72, 0x6c)
	o = msgp.AppendString(o, z.IconURL)
	// string "image"
	o = append(o, 0xa5, 0x69, 0x6d, 0x61, 0x67, 0x65)
	o = msgp.AppendBool(o, z.Image)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *CompletionEntry) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "raw":
			z.Raw, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Raw")
				return
			}
		case "text":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadMapHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Text")
				return
			}
			for zb0002 > 0 {
				zb0002--
				field, bts, err = msgp.ReadMapKeyZC(bts)
				if err != nil {
					err = msgp.WrapError(err, "Text")
					return
				}
				switch msgp.UnsafeString(field) {
				case "content":
					z.Text.Content, bts, err = msgp.ReadStringBytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "Text", "Content")
						return
					}
				case "segments":
					var zb0003 uint32
					zb0003, bts, err = msgp.ReadArrayHeaderBytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "Text", "Segments")
						return
					}
					if cap(z.Text.Segments) >= int(zb0003) {
						z.Text.Segments = (z.Text.Segments)[:zb0003]
					} else {
						z.Text.Segments = make([]TextSegment, zb0003)
					}
					for za0001 := range z.Text.Segments {
						bts, err = z.Text.Segments[za0001].UnmarshalMsg(bts)
						if err != nil {
							err = msgp.WrapError(err, "Text", "Segments", za0001)
							return
						}
					}
				default:
					bts, err = msgp.Skip(bts)
					if err != nil {
						err = msgp.WrapError(err, "Text")
						return
					}
				}
			}
		case "secondary":
			var zb0004 uint32
			zb0004, bts, err = msgp.ReadMapHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Secondary")
				return
			}
			for zb0004 > 0 {
				zb0004--
				field, bts, err = msgp.ReadMapKeyZC(bts)
				if err != nil {
					err = msgp.WrapError(err, "Secondary")
					return
				}
				switch msgp.UnsafeString(field) {
				case "content":
					z.Secondary.Content, bts, err = msgp.ReadStringBytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "Secondary", "Content")
						return
					}
				case "segments":
					var zb0005 uint32
					zb0005, bts, err = msgp.ReadArrayHeaderBytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "Secondary", "Segments")
						return
					}
					if cap(z.Secondary.Segments) >= int(zb0005) {
						z.Secondary.Segments = (z.Secondary.Segments)[:zb0005]
					} else {
						z.Secondary.Segments = make([]TextSegment, zb0005)
					}
					for za0002 := range z.Secondary.Segments {
						bts, err = z.Secondary.Segments[za0002].UnmarshalMsg(bts)
						if err != nil {
							err = msgp.WrapError(err, "Secondary", "Segments", za0002)
							return
						}
					}
				default:
					bts, err = msgp.Skip(bts)
					if err != nil {
						err = msgp.WrapError(err, "Secondary")
						return
					}
				}
			}
		case "icon_url":
			z.IconURL, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "IconURL")
				return
			}
		case "image":
			z.Image, bts, err = msgp.ReadBoolBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Image")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *CompletionEntry) Msgsize() (s int) {
	s = 1 + 4 + msgp.StringPrefixSize + len(z.Raw) + 5 + 1 + 8 + msgp.StringPrefixSize + len(z.Text.Content) + 9 + msgp.ArrayHeaderSize
	for za0001 := range z.Text.Segments {
		s += z.Text.Segments[za0001].Msgsize()
	}
	s += 10 + 1 + 8 + msgp.StringPrefixSize + len(z.Secondary.Content) + 9 + msgp.ArrayHeaderSize
	for za0002 := range z.Secondary.Segments {
		s += z.Secondary.Segments[za0002].Msgsize()
	}
	s += 9 + msgp.StringPrefixSize + len(z.IconURL) + 6 + msgp.BoolSize
	return
}

// DecodeMsg implements msgp.Decodable
func (z *ErrInvalidConfigAtField) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "key":
			z.Key, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Key")
				return
			}
		case "err":
			err = z.Err.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "Err")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *ErrInvalidConfigAtField) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 2
	// write "key"
	err = en.Append(0x82, 0xa3, 0x6b, 0x65, 0x79)
	if err != nil {
		return
	}
	err = en.WriteString(z.Key)
	if err != nil {
		err = msgp.WrapError(err, "Key")
		return
	}
	// write "err"
	err = en.Append(0xa3, 0x65, 0x72, 0x72)
	if err != nil {
		return
	}
	err = z.Err.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "Err")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *ErrInvalidConfigAtField) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 2
	// string "key"
	o = append(o, 0x82, 0xa3, 0x6b, 0x65, 0x79)
	o = msgp.AppendString(o, z.Key)
	// string "err"
	o = append(o, 0xa3, 0x65, 0x72, 0x72)
	o, err = z.Err.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "Err")
		return
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *ErrInvalidConfigAtField) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "key":
			z.Key, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Key")
				return
			}
		case "err":
			bts, err = z.Err.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "Err")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *ErrInvalidConfigAtField) Msgsize() (s int) {
	s = 1 + 4 + msgp.StringPrefixSize + len(z.Key) + 4 + z.Err.Msgsize()
	return
}

// DecodeMsg implements msgp.Decodable
func (z *MessageAttachment) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "reader":
			err = z.Reader.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "Reader")
				return
			}
		case "name":
			z.Name, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Name")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *MessageAttachment) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 2
	// write "reader"
	err = en.Append(0x82, 0xa6, 0x72, 0x65, 0x61, 0x64, 0x65, 0x72)
	if err != nil {
		return
	}
	err = z.Reader.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "Reader")
		return
	}
	// write "name"
	err = en.Append(0xa4, 0x6e, 0x61, 0x6d, 0x65)
	if err != nil {
		return
	}
	err = en.WriteString(z.Name)
	if err != nil {
		err = msgp.WrapError(err, "Name")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *MessageAttachment) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 2
	// string "reader"
	o = append(o, 0x82, 0xa6, 0x72, 0x65, 0x61, 0x64, 0x65, 0x72)
	o, err = z.Reader.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "Reader")
		return
	}
	// string "name"
	o = append(o, 0xa4, 0x6e, 0x61, 0x6d, 0x65)
	o = msgp.AppendString(o, z.Name)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *MessageAttachment) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "reader":
			bts, err = z.Reader.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "Reader")
				return
			}
		case "name":
			z.Name, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Name")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *MessageAttachment) Msgsize() (s int) {
	s = 1 + 7 + z.Reader.Msgsize() + 5 + msgp.StringPrefixSize + len(z.Name)
	return
}

// DecodeMsg implements msgp.Decodable
func (z *TextRich) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "content":
			z.Content, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Content")
				return
			}
		case "segments":
			var zb0002 uint32
			zb0002, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "Segments")
				return
			}
			if cap(z.Segments) >= int(zb0002) {
				z.Segments = (z.Segments)[:zb0002]
			} else {
				z.Segments = make([]TextSegment, zb0002)
			}
			for za0001 := range z.Segments {
				err = z.Segments[za0001].DecodeMsg(dc)
				if err != nil {
					err = msgp.WrapError(err, "Segments", za0001)
					return
				}
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *TextRich) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 2
	// write "content"
	err = en.Append(0x82, 0xa7, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74)
	if err != nil {
		return
	}
	err = en.WriteString(z.Content)
	if err != nil {
		err = msgp.WrapError(err, "Content")
		return
	}
	// write "segments"
	err = en.Append(0xa8, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.Segments)))
	if err != nil {
		err = msgp.WrapError(err, "Segments")
		return
	}
	for za0001 := range z.Segments {
		err = z.Segments[za0001].EncodeMsg(en)
		if err != nil {
			err = msgp.WrapError(err, "Segments", za0001)
			return
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *TextRich) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 2
	// string "content"
	o = append(o, 0x82, 0xa7, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74)
	o = msgp.AppendString(o, z.Content)
	// string "segments"
	o = append(o, 0xa8, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73)
	o = msgp.AppendArrayHeader(o, uint32(len(z.Segments)))
	for za0001 := range z.Segments {
		o, err = z.Segments[za0001].MarshalMsg(o)
		if err != nil {
			err = msgp.WrapError(err, "Segments", za0001)
			return
		}
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *TextRich) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "content":
			z.Content, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Content")
				return
			}
		case "segments":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Segments")
				return
			}
			if cap(z.Segments) >= int(zb0002) {
				z.Segments = (z.Segments)[:zb0002]
			} else {
				z.Segments = make([]TextSegment, zb0002)
			}
			for za0001 := range z.Segments {
				bts, err = z.Segments[za0001].UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "Segments", za0001)
					return
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *TextRich) Msgsize() (s int) {
	s = 1 + 8 + msgp.StringPrefixSize + len(z.Content) + 9 + msgp.ArrayHeaderSize
	for za0001 := range z.Segments {
		s += z.Segments[za0001].Msgsize()
	}
	return
}
