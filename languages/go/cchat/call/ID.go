// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package call

import (
	flatbuffers "github.com/google/flatbuffers/go"

	cchat__core "cchat/core"
)

type ID struct {
	_tab flatbuffers.Table
}

func GetRootAsID(buf []byte, offset flatbuffers.UOffsetT) *ID {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &ID{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsID(buf []byte, offset flatbuffers.UOffsetT) *ID {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &ID{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *ID) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *ID) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *ID) Object(obj *cchat__core.Object) *cchat__core.Object {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		x := o + rcv._tab.Pos
		if obj == nil {
			obj = new(cchat__core.Object)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *ID) CallId() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ID) MutateCallId(n uint64) bool {
	return rcv._tab.MutateUint64Slot(6, n)
}

func IDStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func IDAddObject(builder *flatbuffers.Builder, object flatbuffers.UOffsetT) {
	builder.PrependStructSlot(0, flatbuffers.UOffsetT(object), 0)
}
func IDAddCallId(builder *flatbuffers.Builder, callId uint64) {
	builder.PrependUint64Slot(1, callId, 0)
}
func IDEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
