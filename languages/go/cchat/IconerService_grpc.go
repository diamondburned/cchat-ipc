//Generated by gRPC Go plugin
//If you make any local changes, they will be lost
//source: cchat

package cchat

import "github.com/google/flatbuffers/go"

import (
  context "context"
  grpc "google.golang.org/grpc"
)

// Client API for IconerService service
type IconerServiceClient interface{
  Icon(ctx context.Context, in *flatbuffers.Builder, 
  	opts... grpc.CallOption) (* IconReturns, error)  
}

type iconerServiceClient struct {
  cc *grpc.ClientConn
}

func NewIconerServiceClient(cc *grpc.ClientConn) IconerServiceClient {
  return &iconerServiceClient{cc}
}

func (c *iconerServiceClient) Icon(ctx context.Context, in *flatbuffers.Builder, 
	opts... grpc.CallOption) (* IconReturns, error) {
  out := new(IconReturns)
  err := grpc.Invoke(ctx, "/cchat.IconerService/Icon", in, out, c.cc, opts...)
  if err != nil { return nil, err }
  return out, nil
}

// Server API for IconerService service
type IconerServiceServer interface {
  Icon(context.Context, *IconParameters) (*flatbuffers.Builder, error)  
}

func RegisterIconerServiceServer(s *grpc.Server, srv IconerServiceServer) {
  s.RegisterService(&_IconerService_serviceDesc, srv)
}

func _IconerService_Icon_Handler(srv interface{}, ctx context.Context,
	dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
  in := new(IconParameters)
  if err := dec(in); err != nil { return nil, err }
  if interceptor == nil { return srv.(IconerServiceServer).Icon(ctx, in) }
  info := &grpc.UnaryServerInfo{
    Server: srv,
    FullMethod: "/cchat.IconerService/Icon",
  }
  
  handler := func(ctx context.Context, req interface{}) (interface{}, error) {
    return srv.(IconerServiceServer).Icon(ctx, req.(* IconParameters))
  }
  return interceptor(ctx, in, info, handler)
}


var _IconerService_serviceDesc = grpc.ServiceDesc{
  ServiceName: "cchat.IconerService",
  HandlerType: (*IconerServiceServer)(nil),
  Methods: []grpc.MethodDesc{
    {
      MethodName: "Icon",
      Handler: _IconerService_Icon_Handler, 
    },
  },
  Streams: []grpc.StreamDesc{
  },
}

