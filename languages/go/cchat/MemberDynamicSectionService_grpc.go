//Generated by gRPC Go plugin
//If you make any local changes, they will be lost
//source: cchat

package cchat

import "github.com/google/flatbuffers/go"

import (
  context "context"
  grpc "google.golang.org/grpc"
)

// Client API for MemberDynamicSectionService service
type MemberDynamicSectionServiceClient interface{
  LoadMore(ctx context.Context, in *flatbuffers.Builder, 
  	opts... grpc.CallOption) (* LoadMoreReturns, error)  
  LoadLess(ctx context.Context, in *flatbuffers.Builder, 
  	opts... grpc.CallOption) (* LoadLessReturns, error)  
}

type memberDynamicSectionServiceClient struct {
  cc *grpc.ClientConn
}

func NewMemberDynamicSectionServiceClient(cc *grpc.ClientConn) MemberDynamicSectionServiceClient {
  return &memberDynamicSectionServiceClient{cc}
}

func (c *memberDynamicSectionServiceClient) LoadMore(ctx context.Context, in *flatbuffers.Builder, 
	opts... grpc.CallOption) (* LoadMoreReturns, error) {
  out := new(LoadMoreReturns)
  err := grpc.Invoke(ctx, "/cchat.MemberDynamicSectionService/LoadMore", in, out, c.cc, opts...)
  if err != nil { return nil, err }
  return out, nil
}

func (c *memberDynamicSectionServiceClient) LoadLess(ctx context.Context, in *flatbuffers.Builder, 
	opts... grpc.CallOption) (* LoadLessReturns, error) {
  out := new(LoadLessReturns)
  err := grpc.Invoke(ctx, "/cchat.MemberDynamicSectionService/LoadLess", in, out, c.cc, opts...)
  if err != nil { return nil, err }
  return out, nil
}

// Server API for MemberDynamicSectionService service
type MemberDynamicSectionServiceServer interface {
  LoadMore(context.Context, *LoadMoreParameters) (*flatbuffers.Builder, error)  
  LoadLess(context.Context, *LoadLessParameters) (*flatbuffers.Builder, error)  
}

func RegisterMemberDynamicSectionServiceServer(s *grpc.Server, srv MemberDynamicSectionServiceServer) {
  s.RegisterService(&_MemberDynamicSectionService_serviceDesc, srv)
}

func _MemberDynamicSectionService_LoadMore_Handler(srv interface{}, ctx context.Context,
	dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
  in := new(LoadMoreParameters)
  if err := dec(in); err != nil { return nil, err }
  if interceptor == nil { return srv.(MemberDynamicSectionServiceServer).LoadMore(ctx, in) }
  info := &grpc.UnaryServerInfo{
    Server: srv,
    FullMethod: "/cchat.MemberDynamicSectionService/LoadMore",
  }
  
  handler := func(ctx context.Context, req interface{}) (interface{}, error) {
    return srv.(MemberDynamicSectionServiceServer).LoadMore(ctx, req.(* LoadMoreParameters))
  }
  return interceptor(ctx, in, info, handler)
}


func _MemberDynamicSectionService_LoadLess_Handler(srv interface{}, ctx context.Context,
	dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
  in := new(LoadLessParameters)
  if err := dec(in); err != nil { return nil, err }
  if interceptor == nil { return srv.(MemberDynamicSectionServiceServer).LoadLess(ctx, in) }
  info := &grpc.UnaryServerInfo{
    Server: srv,
    FullMethod: "/cchat.MemberDynamicSectionService/LoadLess",
  }
  
  handler := func(ctx context.Context, req interface{}) (interface{}, error) {
    return srv.(MemberDynamicSectionServiceServer).LoadLess(ctx, req.(* LoadLessParameters))
  }
  return interceptor(ctx, in, info, handler)
}


var _MemberDynamicSectionService_serviceDesc = grpc.ServiceDesc{
  ServiceName: "cchat.MemberDynamicSectionService",
  HandlerType: (*MemberDynamicSectionServiceServer)(nil),
  Methods: []grpc.MethodDesc{
    {
      MethodName: "LoadMore",
      Handler: _MemberDynamicSectionService_LoadMore_Handler, 
    },
    {
      MethodName: "LoadLess",
      Handler: _MemberDynamicSectionService_LoadLess_Handler, 
    },
  },
  Streams: []grpc.StreamDesc{
  },
}

