//Generated by gRPC Go plugin
//If you make any local changes, they will be lost
//source: cchat

package cchat

import "github.com/google/flatbuffers/go"

import (
  context "context"
  grpc "google.golang.org/grpc"
)

// Client API for TypingIndicatorService service
type TypingIndicatorServiceClient interface{
  Typing(ctx context.Context, in *flatbuffers.Builder, 
  	opts... grpc.CallOption) (* TypingReturns, error)  
  TypingSubscribe(ctx context.Context, in *flatbuffers.Builder, 
  	opts... grpc.CallOption) (* TypingSubscribeReturns, error)  
}

type typingIndicatorServiceClient struct {
  cc *grpc.ClientConn
}

func NewTypingIndicatorServiceClient(cc *grpc.ClientConn) TypingIndicatorServiceClient {
  return &typingIndicatorServiceClient{cc}
}

func (c *typingIndicatorServiceClient) Typing(ctx context.Context, in *flatbuffers.Builder, 
	opts... grpc.CallOption) (* TypingReturns, error) {
  out := new(TypingReturns)
  err := grpc.Invoke(ctx, "/cchat.TypingIndicatorService/Typing", in, out, c.cc, opts...)
  if err != nil { return nil, err }
  return out, nil
}

func (c *typingIndicatorServiceClient) TypingSubscribe(ctx context.Context, in *flatbuffers.Builder, 
	opts... grpc.CallOption) (* TypingSubscribeReturns, error) {
  out := new(TypingSubscribeReturns)
  err := grpc.Invoke(ctx, "/cchat.TypingIndicatorService/TypingSubscribe", in, out, c.cc, opts...)
  if err != nil { return nil, err }
  return out, nil
}

// Server API for TypingIndicatorService service
type TypingIndicatorServiceServer interface {
  Typing(context.Context, *TypingParameters) (*flatbuffers.Builder, error)  
  TypingSubscribe(context.Context, *TypingSubscribeParameters) (*flatbuffers.Builder, error)  
}

func RegisterTypingIndicatorServiceServer(s *grpc.Server, srv TypingIndicatorServiceServer) {
  s.RegisterService(&_TypingIndicatorService_serviceDesc, srv)
}

func _TypingIndicatorService_Typing_Handler(srv interface{}, ctx context.Context,
	dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
  in := new(TypingParameters)
  if err := dec(in); err != nil { return nil, err }
  if interceptor == nil { return srv.(TypingIndicatorServiceServer).Typing(ctx, in) }
  info := &grpc.UnaryServerInfo{
    Server: srv,
    FullMethod: "/cchat.TypingIndicatorService/Typing",
  }
  
  handler := func(ctx context.Context, req interface{}) (interface{}, error) {
    return srv.(TypingIndicatorServiceServer).Typing(ctx, req.(* TypingParameters))
  }
  return interceptor(ctx, in, info, handler)
}


func _TypingIndicatorService_TypingSubscribe_Handler(srv interface{}, ctx context.Context,
	dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
  in := new(TypingSubscribeParameters)
  if err := dec(in); err != nil { return nil, err }
  if interceptor == nil { return srv.(TypingIndicatorServiceServer).TypingSubscribe(ctx, in) }
  info := &grpc.UnaryServerInfo{
    Server: srv,
    FullMethod: "/cchat.TypingIndicatorService/TypingSubscribe",
  }
  
  handler := func(ctx context.Context, req interface{}) (interface{}, error) {
    return srv.(TypingIndicatorServiceServer).TypingSubscribe(ctx, req.(* TypingSubscribeParameters))
  }
  return interceptor(ctx, in, info, handler)
}


var _TypingIndicatorService_serviceDesc = grpc.ServiceDesc{
  ServiceName: "cchat.TypingIndicatorService",
  HandlerType: (*TypingIndicatorServiceServer)(nil),
  Methods: []grpc.MethodDesc{
    {
      MethodName: "Typing",
      Handler: _TypingIndicatorService_Typing_Handler, 
    },
    {
      MethodName: "TypingSubscribe",
      Handler: _TypingIndicatorService_TypingSubscribe_Handler, 
    },
  },
  Streams: []grpc.StreamDesc{
  },
}

