// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package cchat

import (
	flatbuffers "github.com/google/flatbuffers/go"

	cchat__call "cchat/call"
)

type SetImageParameters struct {
	_tab flatbuffers.Table
}

func GetRootAsSetImageParameters(buf []byte, offset flatbuffers.UOffsetT) *SetImageParameters {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &SetImageParameters{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsSetImageParameters(buf []byte, offset flatbuffers.UOffsetT) *SetImageParameters {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &SetImageParameters{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *SetImageParameters) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *SetImageParameters) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *SetImageParameters) Call(obj *cchat__call.ID) *cchat__call.ID {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(cchat__call.ID)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *SetImageParameters) Url() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func SetImageParametersStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func SetImageParametersAddCall(builder *flatbuffers.Builder, call flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(call), 0)
}
func SetImageParametersAddUrl(builder *flatbuffers.Builder, url flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(url), 0)
}
func SetImageParametersEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
