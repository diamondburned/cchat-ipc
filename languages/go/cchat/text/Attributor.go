// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package text

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type Attributor struct {
	_tab flatbuffers.Table
}

func GetRootAsAttributor(buf []byte, offset flatbuffers.UOffsetT) *Attributor {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Attributor{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsAttributor(buf []byte, offset flatbuffers.UOffsetT) *Attributor {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &Attributor{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *Attributor) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Attributor) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *Attributor) Attribute() Attribute {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return Attribute(rcv._tab.GetUint32(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *Attributor) MutateAttribute(n Attribute) bool {
	return rcv._tab.MutateUint32Slot(4, uint32(n))
}

func AttributorStart(builder *flatbuffers.Builder) {
	builder.StartObject(1)
}
func AttributorAddAttribute(builder *flatbuffers.Builder, attribute Attribute) {
	builder.PrependUint32Slot(0, uint32(attribute), 0)
}
func AttributorEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
