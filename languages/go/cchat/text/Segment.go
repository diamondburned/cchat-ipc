// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package text

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type Segment struct {
	_tab flatbuffers.Table
}

func GetRootAsSegment(buf []byte, offset flatbuffers.UOffsetT) *Segment {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Segment{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsSegment(buf []byte, offset flatbuffers.UOffsetT) *Segment {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &Segment{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *Segment) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Segment) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *Segment) Bounds(obj *SegmentBounds) *SegmentBounds {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(SegmentBounds)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *Segment) Colorer(obj *Colorer) *Colorer {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(Colorer)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *Segment) Linker(obj *Linker) *Linker {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(Linker)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *Segment) Imager(obj *Imager) *Imager {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(Imager)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *Segment) Avatarer(obj *Avatarer) *Avatarer {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(Avatarer)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *Segment) Mentioner(obj *Mentioner) *Mentioner {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(Mentioner)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *Segment) Attributor(obj *Attributor) *Attributor {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(Attributor)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *Segment) Codeblocker(obj *Codeblocker) *Codeblocker {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(Codeblocker)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *Segment) Quoteblocker(obj *Quoteblocker) *Quoteblocker {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(20))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(Quoteblocker)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *Segment) MessageReferencer(obj *MessageReferencer) *MessageReferencer {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(22))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(MessageReferencer)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func SegmentStart(builder *flatbuffers.Builder) {
	builder.StartObject(10)
}
func SegmentAddBounds(builder *flatbuffers.Builder, bounds flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(bounds), 0)
}
func SegmentAddColorer(builder *flatbuffers.Builder, colorer flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(colorer), 0)
}
func SegmentAddLinker(builder *flatbuffers.Builder, linker flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(linker), 0)
}
func SegmentAddImager(builder *flatbuffers.Builder, imager flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(imager), 0)
}
func SegmentAddAvatarer(builder *flatbuffers.Builder, avatarer flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(avatarer), 0)
}
func SegmentAddMentioner(builder *flatbuffers.Builder, mentioner flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(mentioner), 0)
}
func SegmentAddAttributor(builder *flatbuffers.Builder, attributor flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(6, flatbuffers.UOffsetT(attributor), 0)
}
func SegmentAddCodeblocker(builder *flatbuffers.Builder, codeblocker flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(7, flatbuffers.UOffsetT(codeblocker), 0)
}
func SegmentAddQuoteblocker(builder *flatbuffers.Builder, quoteblocker flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(8, flatbuffers.UOffsetT(quoteblocker), 0)
}
func SegmentAddMessageReferencer(builder *flatbuffers.Builder, messageReferencer flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(9, flatbuffers.UOffsetT(messageReferencer), 0)
}
func SegmentEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
