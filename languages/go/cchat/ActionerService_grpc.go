//Generated by gRPC Go plugin
//If you make any local changes, they will be lost
//source: cchat

package cchat

import "github.com/google/flatbuffers/go"

import (
  context "context"
  grpc "google.golang.org/grpc"
)

// Client API for ActionerService service
type ActionerServiceClient interface{
  Actions(ctx context.Context, in *flatbuffers.Builder, 
  	opts... grpc.CallOption) (* ActionsReturns, error)  
  Do(ctx context.Context, in *flatbuffers.Builder, 
  	opts... grpc.CallOption) (* DoReturns, error)  
}

type actionerServiceClient struct {
  cc *grpc.ClientConn
}

func NewActionerServiceClient(cc *grpc.ClientConn) ActionerServiceClient {
  return &actionerServiceClient{cc}
}

func (c *actionerServiceClient) Actions(ctx context.Context, in *flatbuffers.Builder, 
	opts... grpc.CallOption) (* ActionsReturns, error) {
  out := new(ActionsReturns)
  err := grpc.Invoke(ctx, "/cchat.ActionerService/Actions", in, out, c.cc, opts...)
  if err != nil { return nil, err }
  return out, nil
}

func (c *actionerServiceClient) Do(ctx context.Context, in *flatbuffers.Builder, 
	opts... grpc.CallOption) (* DoReturns, error) {
  out := new(DoReturns)
  err := grpc.Invoke(ctx, "/cchat.ActionerService/Do", in, out, c.cc, opts...)
  if err != nil { return nil, err }
  return out, nil
}

// Server API for ActionerService service
type ActionerServiceServer interface {
  Actions(context.Context, *ActionsParameters) (*flatbuffers.Builder, error)  
  Do(context.Context, *DoParameters) (*flatbuffers.Builder, error)  
}

func RegisterActionerServiceServer(s *grpc.Server, srv ActionerServiceServer) {
  s.RegisterService(&_ActionerService_serviceDesc, srv)
}

func _ActionerService_Actions_Handler(srv interface{}, ctx context.Context,
	dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
  in := new(ActionsParameters)
  if err := dec(in); err != nil { return nil, err }
  if interceptor == nil { return srv.(ActionerServiceServer).Actions(ctx, in) }
  info := &grpc.UnaryServerInfo{
    Server: srv,
    FullMethod: "/cchat.ActionerService/Actions",
  }
  
  handler := func(ctx context.Context, req interface{}) (interface{}, error) {
    return srv.(ActionerServiceServer).Actions(ctx, req.(* ActionsParameters))
  }
  return interceptor(ctx, in, info, handler)
}


func _ActionerService_Do_Handler(srv interface{}, ctx context.Context,
	dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
  in := new(DoParameters)
  if err := dec(in); err != nil { return nil, err }
  if interceptor == nil { return srv.(ActionerServiceServer).Do(ctx, in) }
  info := &grpc.UnaryServerInfo{
    Server: srv,
    FullMethod: "/cchat.ActionerService/Do",
  }
  
  handler := func(ctx context.Context, req interface{}) (interface{}, error) {
    return srv.(ActionerServiceServer).Do(ctx, req.(* DoParameters))
  }
  return interceptor(ctx, in, info, handler)
}


var _ActionerService_serviceDesc = grpc.ServiceDesc{
  ServiceName: "cchat.ActionerService",
  HandlerType: (*ActionerServiceServer)(nil),
  Methods: []grpc.MethodDesc{
    {
      MethodName: "Actions",
      Handler: _ActionerService_Actions_Handler, 
    },
    {
      MethodName: "Do",
      Handler: _ActionerService_Do_Handler, 
    },
  },
  Streams: []grpc.StreamDesc{
  },
}

