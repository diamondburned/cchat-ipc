//Generated by gRPC Go plugin
//If you make any local changes, they will be lost
//source: cchat

package cchat

import "github.com/google/flatbuffers/go"

import (
  context "context"
  grpc "google.golang.org/grpc"
)

// Client API for BackloggerService service
type BackloggerServiceClient interface{
  Backlog(ctx context.Context, in *flatbuffers.Builder, 
  	opts... grpc.CallOption) (* BacklogReturns, error)  
}

type backloggerServiceClient struct {
  cc *grpc.ClientConn
}

func NewBackloggerServiceClient(cc *grpc.ClientConn) BackloggerServiceClient {
  return &backloggerServiceClient{cc}
}

func (c *backloggerServiceClient) Backlog(ctx context.Context, in *flatbuffers.Builder, 
	opts... grpc.CallOption) (* BacklogReturns, error) {
  out := new(BacklogReturns)
  err := grpc.Invoke(ctx, "/cchat.BackloggerService/Backlog", in, out, c.cc, opts...)
  if err != nil { return nil, err }
  return out, nil
}

// Server API for BackloggerService service
type BackloggerServiceServer interface {
  Backlog(context.Context, *BacklogParameters) (*flatbuffers.Builder, error)  
}

func RegisterBackloggerServiceServer(s *grpc.Server, srv BackloggerServiceServer) {
  s.RegisterService(&_BackloggerService_serviceDesc, srv)
}

func _BackloggerService_Backlog_Handler(srv interface{}, ctx context.Context,
	dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
  in := new(BacklogParameters)
  if err := dec(in); err != nil { return nil, err }
  if interceptor == nil { return srv.(BackloggerServiceServer).Backlog(ctx, in) }
  info := &grpc.UnaryServerInfo{
    Server: srv,
    FullMethod: "/cchat.BackloggerService/Backlog",
  }
  
  handler := func(ctx context.Context, req interface{}) (interface{}, error) {
    return srv.(BackloggerServiceServer).Backlog(ctx, req.(* BacklogParameters))
  }
  return interceptor(ctx, in, info, handler)
}


var _BackloggerService_serviceDesc = grpc.ServiceDesc{
  ServiceName: "cchat.BackloggerService",
  HandlerType: (*BackloggerServiceServer)(nil),
  Methods: []grpc.MethodDesc{
    {
      MethodName: "Backlog",
      Handler: _BackloggerService_Backlog_Handler, 
    },
  },
  Streams: []grpc.StreamDesc{
  },
}

