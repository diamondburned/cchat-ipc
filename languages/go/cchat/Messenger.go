// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package cchat

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type Messenger struct {
	_tab flatbuffers.Table
}

func GetRootAsMessenger(buf []byte, offset flatbuffers.UOffsetT) *Messenger {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Messenger{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsMessenger(buf []byte, offset flatbuffers.UOffsetT) *Messenger {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &Messenger{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *Messenger) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Messenger) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *Messenger) Sender(obj *Sender) *Sender {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(Sender)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *Messenger) Editor(obj *Editor) *Editor {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(Editor)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *Messenger) Actioner(obj *Actioner) *Actioner {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(Actioner)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *Messenger) Nicknamer(obj *Nicknamer) *Nicknamer {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(Nicknamer)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *Messenger) Backlogger(obj *Backlogger) *Backlogger {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(Backlogger)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *Messenger) MemberLister(obj *MemberLister) *MemberLister {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(MemberLister)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *Messenger) UnreadIndicator(obj *UnreadIndicator) *UnreadIndicator {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(UnreadIndicator)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *Messenger) TypingIndicator(obj *TypingIndicator) *TypingIndicator {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(TypingIndicator)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func MessengerStart(builder *flatbuffers.Builder) {
	builder.StartObject(8)
}
func MessengerAddSender(builder *flatbuffers.Builder, sender flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(sender), 0)
}
func MessengerAddEditor(builder *flatbuffers.Builder, editor flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(editor), 0)
}
func MessengerAddActioner(builder *flatbuffers.Builder, actioner flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(actioner), 0)
}
func MessengerAddNicknamer(builder *flatbuffers.Builder, nicknamer flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(nicknamer), 0)
}
func MessengerAddBacklogger(builder *flatbuffers.Builder, backlogger flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(backlogger), 0)
}
func MessengerAddMemberLister(builder *flatbuffers.Builder, memberLister flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(memberLister), 0)
}
func MessengerAddUnreadIndicator(builder *flatbuffers.Builder, unreadIndicator flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(6, flatbuffers.UOffsetT(unreadIndicator), 0)
}
func MessengerAddTypingIndicator(builder *flatbuffers.Builder, typingIndicator flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(7, flatbuffers.UOffsetT(typingIndicator), 0)
}
func MessengerEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
