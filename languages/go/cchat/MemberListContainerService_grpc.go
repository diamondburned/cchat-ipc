//Generated by gRPC Go plugin
//If you make any local changes, they will be lost
//source: cchat

package cchat

import "github.com/google/flatbuffers/go"

import (
  context "context"
  grpc "google.golang.org/grpc"
)

// Client API for MemberListContainerService service
type MemberListContainerServiceClient interface{
  SetSections(ctx context.Context, in *flatbuffers.Builder, 
  	opts... grpc.CallOption) (* NoReply, error)  
  SetMember(ctx context.Context, in *flatbuffers.Builder, 
  	opts... grpc.CallOption) (* NoReply, error)  
  RemoveMember(ctx context.Context, in *flatbuffers.Builder, 
  	opts... grpc.CallOption) (* NoReply, error)  
}

type memberListContainerServiceClient struct {
  cc *grpc.ClientConn
}

func NewMemberListContainerServiceClient(cc *grpc.ClientConn) MemberListContainerServiceClient {
  return &memberListContainerServiceClient{cc}
}

func (c *memberListContainerServiceClient) SetSections(ctx context.Context, in *flatbuffers.Builder, 
	opts... grpc.CallOption) (* NoReply, error) {
  out := new(NoReply)
  err := grpc.Invoke(ctx, "/cchat.MemberListContainerService/SetSections", in, out, c.cc, opts...)
  if err != nil { return nil, err }
  return out, nil
}

func (c *memberListContainerServiceClient) SetMember(ctx context.Context, in *flatbuffers.Builder, 
	opts... grpc.CallOption) (* NoReply, error) {
  out := new(NoReply)
  err := grpc.Invoke(ctx, "/cchat.MemberListContainerService/SetMember", in, out, c.cc, opts...)
  if err != nil { return nil, err }
  return out, nil
}

func (c *memberListContainerServiceClient) RemoveMember(ctx context.Context, in *flatbuffers.Builder, 
	opts... grpc.CallOption) (* NoReply, error) {
  out := new(NoReply)
  err := grpc.Invoke(ctx, "/cchat.MemberListContainerService/RemoveMember", in, out, c.cc, opts...)
  if err != nil { return nil, err }
  return out, nil
}

// Server API for MemberListContainerService service
type MemberListContainerServiceServer interface {
  SetSections(context.Context, *SetSectionsParameters) (*flatbuffers.Builder, error)  
  SetMember(context.Context, *SetMemberParameters) (*flatbuffers.Builder, error)  
  RemoveMember(context.Context, *RemoveMemberParameters) (*flatbuffers.Builder, error)  
}

func RegisterMemberListContainerServiceServer(s *grpc.Server, srv MemberListContainerServiceServer) {
  s.RegisterService(&_MemberListContainerService_serviceDesc, srv)
}

func _MemberListContainerService_SetSections_Handler(srv interface{}, ctx context.Context,
	dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
  in := new(SetSectionsParameters)
  if err := dec(in); err != nil { return nil, err }
  if interceptor == nil { return srv.(MemberListContainerServiceServer).SetSections(ctx, in) }
  info := &grpc.UnaryServerInfo{
    Server: srv,
    FullMethod: "/cchat.MemberListContainerService/SetSections",
  }
  
  handler := func(ctx context.Context, req interface{}) (interface{}, error) {
    return srv.(MemberListContainerServiceServer).SetSections(ctx, req.(* SetSectionsParameters))
  }
  return interceptor(ctx, in, info, handler)
}


func _MemberListContainerService_SetMember_Handler(srv interface{}, ctx context.Context,
	dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
  in := new(SetMemberParameters)
  if err := dec(in); err != nil { return nil, err }
  if interceptor == nil { return srv.(MemberListContainerServiceServer).SetMember(ctx, in) }
  info := &grpc.UnaryServerInfo{
    Server: srv,
    FullMethod: "/cchat.MemberListContainerService/SetMember",
  }
  
  handler := func(ctx context.Context, req interface{}) (interface{}, error) {
    return srv.(MemberListContainerServiceServer).SetMember(ctx, req.(* SetMemberParameters))
  }
  return interceptor(ctx, in, info, handler)
}


func _MemberListContainerService_RemoveMember_Handler(srv interface{}, ctx context.Context,
	dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
  in := new(RemoveMemberParameters)
  if err := dec(in); err != nil { return nil, err }
  if interceptor == nil { return srv.(MemberListContainerServiceServer).RemoveMember(ctx, in) }
  info := &grpc.UnaryServerInfo{
    Server: srv,
    FullMethod: "/cchat.MemberListContainerService/RemoveMember",
  }
  
  handler := func(ctx context.Context, req interface{}) (interface{}, error) {
    return srv.(MemberListContainerServiceServer).RemoveMember(ctx, req.(* RemoveMemberParameters))
  }
  return interceptor(ctx, in, info, handler)
}


var _MemberListContainerService_serviceDesc = grpc.ServiceDesc{
  ServiceName: "cchat.MemberListContainerService",
  HandlerType: (*MemberListContainerServiceServer)(nil),
  Methods: []grpc.MethodDesc{
    {
      MethodName: "SetSections",
      Handler: _MemberListContainerService_SetSections_Handler, 
    },
    {
      MethodName: "SetMember",
      Handler: _MemberListContainerService_SetMember_Handler, 
    },
    {
      MethodName: "RemoveMember",
      Handler: _MemberListContainerService_RemoveMember_Handler, 
    },
  },
  Streams: []grpc.StreamDesc{
  },
}

