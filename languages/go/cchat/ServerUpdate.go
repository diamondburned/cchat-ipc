// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package cchat

import (
	flatbuffers "github.com/google/flatbuffers/go"

	cchat__text "cchat/text"
)

type ServerUpdate struct {
	_tab flatbuffers.Table
}

func GetRootAsServerUpdate(buf []byte, offset flatbuffers.UOffsetT) *ServerUpdate {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &ServerUpdate{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsServerUpdate(buf []byte, offset flatbuffers.UOffsetT) *ServerUpdate {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &ServerUpdate{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *ServerUpdate) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *ServerUpdate) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *ServerUpdate) Id() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *ServerUpdate) Name(obj *cchat__text.Rich) *cchat__text.Rich {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(cchat__text.Rich)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *ServerUpdate) PreviousId(obj *ServerUpdatePreviousID) *ServerUpdatePreviousID {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(ServerUpdatePreviousID)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *ServerUpdate) Iconer(obj *Iconer) *Iconer {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(Iconer)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *ServerUpdate) Lister(obj *Lister) *Lister {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(Lister)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *ServerUpdate) Messenger(obj *Messenger) *Messenger {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(Messenger)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *ServerUpdate) Commander(obj *Commander) *Commander {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(Commander)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *ServerUpdate) Configurator(obj *Configurator) *Configurator {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(18))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(Configurator)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func ServerUpdateStart(builder *flatbuffers.Builder) {
	builder.StartObject(8)
}
func ServerUpdateAddId(builder *flatbuffers.Builder, id flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(id), 0)
}
func ServerUpdateAddName(builder *flatbuffers.Builder, name flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(name), 0)
}
func ServerUpdateAddPreviousId(builder *flatbuffers.Builder, previousId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(previousId), 0)
}
func ServerUpdateAddIconer(builder *flatbuffers.Builder, iconer flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(iconer), 0)
}
func ServerUpdateAddLister(builder *flatbuffers.Builder, lister flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(lister), 0)
}
func ServerUpdateAddMessenger(builder *flatbuffers.Builder, messenger flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(messenger), 0)
}
func ServerUpdateAddCommander(builder *flatbuffers.Builder, commander flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(6, flatbuffers.UOffsetT(commander), 0)
}
func ServerUpdateAddConfigurator(builder *flatbuffers.Builder, configurator flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(7, flatbuffers.UOffsetT(configurator), 0)
}
func ServerUpdateEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
