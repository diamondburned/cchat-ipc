// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package cchat

import (
	flatbuffers "github.com/google/flatbuffers/go"

	cchat__text "cchat/text"
)

type CompletionEntry struct {
	_tab flatbuffers.Table
}

func GetRootAsCompletionEntry(buf []byte, offset flatbuffers.UOffsetT) *CompletionEntry {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &CompletionEntry{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsCompletionEntry(buf []byte, offset flatbuffers.UOffsetT) *CompletionEntry {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &CompletionEntry{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *CompletionEntry) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *CompletionEntry) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *CompletionEntry) Raw() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *CompletionEntry) Text(obj *cchat__text.Rich) *cchat__text.Rich {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(cchat__text.Rich)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *CompletionEntry) Secondary(obj *cchat__text.Rich) *cchat__text.Rich {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(cchat__text.Rich)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *CompletionEntry) IconUrl() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *CompletionEntry) Image() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *CompletionEntry) MutateImage(n bool) bool {
	return rcv._tab.MutateBoolSlot(12, n)
}

func CompletionEntryStart(builder *flatbuffers.Builder) {
	builder.StartObject(5)
}
func CompletionEntryAddRaw(builder *flatbuffers.Builder, raw flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(raw), 0)
}
func CompletionEntryAddText(builder *flatbuffers.Builder, text flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(text), 0)
}
func CompletionEntryAddSecondary(builder *flatbuffers.Builder, secondary flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(secondary), 0)
}
func CompletionEntryAddIconUrl(builder *flatbuffers.Builder, iconUrl flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(iconUrl), 0)
}
func CompletionEntryAddImage(builder *flatbuffers.Builder, image bool) {
	builder.PrependBoolSlot(4, image, false)
}
func CompletionEntryEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
