// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package cchat

import (
	flatbuffers "github.com/google/flatbuffers/go"

	cchat__text "cchat/text"
)

type MemberSection struct {
	_tab flatbuffers.Table
}

func GetRootAsMemberSection(buf []byte, offset flatbuffers.UOffsetT) *MemberSection {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &MemberSection{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsMemberSection(buf []byte, offset flatbuffers.UOffsetT) *MemberSection {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &MemberSection{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *MemberSection) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *MemberSection) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *MemberSection) Id() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *MemberSection) Name(obj *cchat__text.Rich) *cchat__text.Rich {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(cchat__text.Rich)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *MemberSection) Total() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *MemberSection) MutateTotal(n int32) bool {
	return rcv._tab.MutateInt32Slot(8, n)
}

func (rcv *MemberSection) Iconer(obj *Iconer) *Iconer {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(Iconer)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *MemberSection) MemberDynamicSection(obj *MemberDynamicSection) *MemberDynamicSection {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(MemberDynamicSection)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func MemberSectionStart(builder *flatbuffers.Builder) {
	builder.StartObject(5)
}
func MemberSectionAddId(builder *flatbuffers.Builder, id flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(id), 0)
}
func MemberSectionAddName(builder *flatbuffers.Builder, name flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(name), 0)
}
func MemberSectionAddTotal(builder *flatbuffers.Builder, total int32) {
	builder.PrependInt32Slot(2, total, 0)
}
func MemberSectionAddIconer(builder *flatbuffers.Builder, iconer flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(iconer), 0)
}
func MemberSectionAddMemberDynamicSection(builder *flatbuffers.Builder, memberDynamicSection flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(memberDynamicSection), 0)
}
func MemberSectionEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
