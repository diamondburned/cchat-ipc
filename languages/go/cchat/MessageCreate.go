// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package cchat

import (
	flatbuffers "github.com/google/flatbuffers/go"

	cchat__core "cchat/core"
	cchat__text "cchat/text"
)

type MessageCreate struct {
	_tab flatbuffers.Table
}

func GetRootAsMessageCreate(buf []byte, offset flatbuffers.UOffsetT) *MessageCreate {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &MessageCreate{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsMessageCreate(buf []byte, offset flatbuffers.UOffsetT) *MessageCreate {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &MessageCreate{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *MessageCreate) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *MessageCreate) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *MessageCreate) Id() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *MessageCreate) Time(obj *cchat__core.Time) *cchat__core.Time {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(cchat__core.Time)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *MessageCreate) Nonce() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *MessageCreate) Author(obj *Author) *Author {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(Author)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *MessageCreate) Content(obj *cchat__text.Rich) *cchat__text.Rich {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(cchat__text.Rich)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *MessageCreate) Mentioned() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *MessageCreate) MutateMentioned(n bool) bool {
	return rcv._tab.MutateBoolSlot(14, n)
}

func MessageCreateStart(builder *flatbuffers.Builder) {
	builder.StartObject(6)
}
func MessageCreateAddId(builder *flatbuffers.Builder, id flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(id), 0)
}
func MessageCreateAddTime(builder *flatbuffers.Builder, time flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(time), 0)
}
func MessageCreateAddNonce(builder *flatbuffers.Builder, nonce flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(nonce), 0)
}
func MessageCreateAddAuthor(builder *flatbuffers.Builder, author flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(author), 0)
}
func MessageCreateAddContent(builder *flatbuffers.Builder, content flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(content), 0)
}
func MessageCreateAddMentioned(builder *flatbuffers.Builder, mentioned bool) {
	builder.PrependBoolSlot(5, mentioned, false)
}
func MessageCreateEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
