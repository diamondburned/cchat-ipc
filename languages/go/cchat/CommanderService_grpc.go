//Generated by gRPC Go plugin
//If you make any local changes, they will be lost
//source: cchat

package cchat

import "github.com/google/flatbuffers/go"

import (
  context "context"
  grpc "google.golang.org/grpc"
)

// Client API for CommanderService service
type CommanderServiceClient interface{
  Run(ctx context.Context, in *flatbuffers.Builder, 
  	opts... grpc.CallOption) (* RunReturns, error)  
}

type commanderServiceClient struct {
  cc *grpc.ClientConn
}

func NewCommanderServiceClient(cc *grpc.ClientConn) CommanderServiceClient {
  return &commanderServiceClient{cc}
}

func (c *commanderServiceClient) Run(ctx context.Context, in *flatbuffers.Builder, 
	opts... grpc.CallOption) (* RunReturns, error) {
  out := new(RunReturns)
  err := grpc.Invoke(ctx, "/cchat.CommanderService/Run", in, out, c.cc, opts...)
  if err != nil { return nil, err }
  return out, nil
}

// Server API for CommanderService service
type CommanderServiceServer interface {
  Run(context.Context, *RunParameters) (*flatbuffers.Builder, error)  
}

func RegisterCommanderServiceServer(s *grpc.Server, srv CommanderServiceServer) {
  s.RegisterService(&_CommanderService_serviceDesc, srv)
}

func _CommanderService_Run_Handler(srv interface{}, ctx context.Context,
	dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
  in := new(RunParameters)
  if err := dec(in); err != nil { return nil, err }
  if interceptor == nil { return srv.(CommanderServiceServer).Run(ctx, in) }
  info := &grpc.UnaryServerInfo{
    Server: srv,
    FullMethod: "/cchat.CommanderService/Run",
  }
  
  handler := func(ctx context.Context, req interface{}) (interface{}, error) {
    return srv.(CommanderServiceServer).Run(ctx, req.(* RunParameters))
  }
  return interceptor(ctx, in, info, handler)
}


var _CommanderService_serviceDesc = grpc.ServiceDesc{
  ServiceName: "cchat.CommanderService",
  HandlerType: (*CommanderServiceServer)(nil),
  Methods: []grpc.MethodDesc{
    {
      MethodName: "Run",
      Handler: _CommanderService_Run_Handler, 
    },
  },
  Streams: []grpc.StreamDesc{
  },
}

