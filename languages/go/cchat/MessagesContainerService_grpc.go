//Generated by gRPC Go plugin
//If you make any local changes, they will be lost
//source: cchat

package cchat

import "github.com/google/flatbuffers/go"

import (
  context "context"
  grpc "google.golang.org/grpc"
)

// Client API for MessagesContainerService service
type MessagesContainerServiceClient interface{
  CreateMessage(ctx context.Context, in *flatbuffers.Builder, 
  	opts... grpc.CallOption) (* NoReply, error)  
  UpdateMessage(ctx context.Context, in *flatbuffers.Builder, 
  	opts... grpc.CallOption) (* NoReply, error)  
  DeleteMessage(ctx context.Context, in *flatbuffers.Builder, 
  	opts... grpc.CallOption) (* NoReply, error)  
}

type messagesContainerServiceClient struct {
  cc *grpc.ClientConn
}

func NewMessagesContainerServiceClient(cc *grpc.ClientConn) MessagesContainerServiceClient {
  return &messagesContainerServiceClient{cc}
}

func (c *messagesContainerServiceClient) CreateMessage(ctx context.Context, in *flatbuffers.Builder, 
	opts... grpc.CallOption) (* NoReply, error) {
  out := new(NoReply)
  err := grpc.Invoke(ctx, "/cchat.MessagesContainerService/CreateMessage", in, out, c.cc, opts...)
  if err != nil { return nil, err }
  return out, nil
}

func (c *messagesContainerServiceClient) UpdateMessage(ctx context.Context, in *flatbuffers.Builder, 
	opts... grpc.CallOption) (* NoReply, error) {
  out := new(NoReply)
  err := grpc.Invoke(ctx, "/cchat.MessagesContainerService/UpdateMessage", in, out, c.cc, opts...)
  if err != nil { return nil, err }
  return out, nil
}

func (c *messagesContainerServiceClient) DeleteMessage(ctx context.Context, in *flatbuffers.Builder, 
	opts... grpc.CallOption) (* NoReply, error) {
  out := new(NoReply)
  err := grpc.Invoke(ctx, "/cchat.MessagesContainerService/DeleteMessage", in, out, c.cc, opts...)
  if err != nil { return nil, err }
  return out, nil
}

// Server API for MessagesContainerService service
type MessagesContainerServiceServer interface {
  CreateMessage(context.Context, *CreateMessageParameters) (*flatbuffers.Builder, error)  
  UpdateMessage(context.Context, *UpdateMessageParameters) (*flatbuffers.Builder, error)  
  DeleteMessage(context.Context, *DeleteMessageParameters) (*flatbuffers.Builder, error)  
}

func RegisterMessagesContainerServiceServer(s *grpc.Server, srv MessagesContainerServiceServer) {
  s.RegisterService(&_MessagesContainerService_serviceDesc, srv)
}

func _MessagesContainerService_CreateMessage_Handler(srv interface{}, ctx context.Context,
	dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
  in := new(CreateMessageParameters)
  if err := dec(in); err != nil { return nil, err }
  if interceptor == nil { return srv.(MessagesContainerServiceServer).CreateMessage(ctx, in) }
  info := &grpc.UnaryServerInfo{
    Server: srv,
    FullMethod: "/cchat.MessagesContainerService/CreateMessage",
  }
  
  handler := func(ctx context.Context, req interface{}) (interface{}, error) {
    return srv.(MessagesContainerServiceServer).CreateMessage(ctx, req.(* CreateMessageParameters))
  }
  return interceptor(ctx, in, info, handler)
}


func _MessagesContainerService_UpdateMessage_Handler(srv interface{}, ctx context.Context,
	dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
  in := new(UpdateMessageParameters)
  if err := dec(in); err != nil { return nil, err }
  if interceptor == nil { return srv.(MessagesContainerServiceServer).UpdateMessage(ctx, in) }
  info := &grpc.UnaryServerInfo{
    Server: srv,
    FullMethod: "/cchat.MessagesContainerService/UpdateMessage",
  }
  
  handler := func(ctx context.Context, req interface{}) (interface{}, error) {
    return srv.(MessagesContainerServiceServer).UpdateMessage(ctx, req.(* UpdateMessageParameters))
  }
  return interceptor(ctx, in, info, handler)
}


func _MessagesContainerService_DeleteMessage_Handler(srv interface{}, ctx context.Context,
	dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
  in := new(DeleteMessageParameters)
  if err := dec(in); err != nil { return nil, err }
  if interceptor == nil { return srv.(MessagesContainerServiceServer).DeleteMessage(ctx, in) }
  info := &grpc.UnaryServerInfo{
    Server: srv,
    FullMethod: "/cchat.MessagesContainerService/DeleteMessage",
  }
  
  handler := func(ctx context.Context, req interface{}) (interface{}, error) {
    return srv.(MessagesContainerServiceServer).DeleteMessage(ctx, req.(* DeleteMessageParameters))
  }
  return interceptor(ctx, in, info, handler)
}


var _MessagesContainerService_serviceDesc = grpc.ServiceDesc{
  ServiceName: "cchat.MessagesContainerService",
  HandlerType: (*MessagesContainerServiceServer)(nil),
  Methods: []grpc.MethodDesc{
    {
      MethodName: "CreateMessage",
      Handler: _MessagesContainerService_CreateMessage_Handler, 
    },
    {
      MethodName: "UpdateMessage",
      Handler: _MessagesContainerService_UpdateMessage_Handler, 
    },
    {
      MethodName: "DeleteMessage",
      Handler: _MessagesContainerService_DeleteMessage_Handler, 
    },
  },
  Streams: []grpc.StreamDesc{
  },
}

