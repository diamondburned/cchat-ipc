package main

import (
	"github.com/dave/jennifer/jen"
	"github.com/diamondburned/cchat/repository"
)

func main() {
	for _, pkg := range repository.Main {
		f := jen.NewFile("cchatipc")
		f.HeaderComment("Code generated by ./generator. DO NOT EDIT.")
		f.PackageComment(pkg.Comment.GoString(1))
		f.ImportName("github.com/diamondburned/cchat", "cchat")
		f.ImportName("github.com/diamondburned/cchat/text", "text")

		gen := Generator{
			pkg:  pkg,
			file: f,
		}

		// Since Go can just import cchat itself, we don't need to generate
		// atypical types that aren't interfaces.
	}
}

// TypeQual generates the qualifier for the Go type. For the most parts, it
// calls package repository's TypeQual, but certain types are replaced.
func TypeQual(typePath string) (string, string) {
	path, typeName := repository.TypeQual(typePath)

	switch {
	case path == "" && typeName == "error":
		return "", "Error"
	case path == "" && typeName == "time.Time":
		return "", "Time"
	}

	return path, typeName
}

type Generator struct {
	pkg  repository.Package
	file *jen.File
}

// genTypes generates unimportant types.
func (g *Generator) genTypes() {}
